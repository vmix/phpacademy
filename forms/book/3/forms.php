<?php
/**
 * Created by PhpStorm.
 * User: 0311
 * Date: 04.05.2017
 * Time: 1:58 PM
 */
/**
 * Проверка ввода на форме:
обязательные поля
 * Задача: Требуется убедиться в том, что для элемента формы было задано значение, на-
пример, что текстовое поле не осталось пустым.
 */
/**
 * Функция filter_has_var() проверяет входные данные, полученные PHP, перед
внесением каких-либо модификаций в вашем коде. Последовательное использо-
вание различных функций-фильтров, рассматриваемых позднее в этой главе,
обеспечивает необходимую проверку и защитную обработку данных, введенных
пользователем. Первый аргумент filter_has_var() указывает, где следует искать;
значение INPUT_POST проверяет данные POST в теле запроса. Другие возможные
значения — INPUT_GET (переменные из строки запроса), INPUT_COOKIE (cookie),
INPUT_SERVER (серверная информация, которая сохраняется в $_SERVER) и INPUT_
ENV (переменные окружения).
Разные типы элементов форм, которые не были заполнены пользователем, по-
разному ведут себя в данных GET и POST. Пустые текстовые поля, текстовые области
и поля отправки файлов приводят к появлению элементов, значение которых
представляет собой строку нулевой длины. Для флажков и переключателей, кото-
рые не были установлены, никакие элементы в данных GET или POST не создаются.
Браузеры обычно заставляют пользователя выбрать один из вариантов в раскры-
вающихся меню, поддерживающих одиночный выбор, но раскрывающиеся меню
с множественным выбором, в которых нет выбранных вариантов, работают анало-
гично флажкам — они не создают никаких элементов в данных GET или POST.
Что еще хуже, запросы могут поступать не только от браузеров. Ваши программы
PHP могут получать запросы от других программ, любознательный хакер может
построить запрос вручную, а злоумышленник может создавать запросы в попыт-
ке найти уязвимость в вашей системе. Чтобы ваш код был как можно более на-
дежным, всегда проверяйте, что некоторый элемент существует в наборе входных
данных, прежде чем применять к нему другие стратегии проверки. Кроме того,
если стратегия проверки подразумевает, что элемент представляет собой массив
значений (как в листинге 9.14), убедитесь в этом при помощи флага фильтрации
FILTER_REQUIRE_ARRAY.
В листинге 9.5 функции filter_has_var(), filter_input() и strlen() использу-
ются для максимально жесткой проверки данных формы.
Вызов filter_input() с двумя аргументами применяет фильтр по умолчанию,
который не изменяет входные данные. В листинге 9.5 отправленное значение
flavor никак не преобразуется. Фильтр FILTER_SANITIZE_STRING, примененный
к отправленному значению color, удаляет теги HTML, удаляет двоичные сим-
волы, не входящие в набор ASCII, и кодирует амперсанды (&). Фильтр FILTER_
DEFAULT применяется к choices для явного задания фильтра по умолчанию. Это
существенно в последней части листинга 9.5, потому что флаг фильтра FILTER_
REQUIRE_ARRAY должен передаваться в четвертом аргументе filter_input().
Возможно, вминуту слабости вам захочется использовать empty() вместо strlen()
для проверки того, что в текстовом поле было введено значение. Не поддавайтесь
искушению; вы создадите себе проблемы, потому что строка из одного символа
0 интерпретируется как false по правилам логических вычислений PHP. Это
может привести к ошибкам в проверке форм, если, например, кто-нибудь введет
0 в текстовом поле children, в результате чего элемент $_POST['children'] будет
содержать 0. Тогда вызов empty($_POST['children']) вернет true — что с точки
зрения проверки формы свидетельствует об ошибке.
 */
// Убедиться в том, что значение $_POST['flavor'] существует,

// прежде чем проверять его длину
if ($_SERVER['REQUEST_METHOD'] == 'GET') { ?>
    <form action="<?php echo htmlentities($_SERVER['SCRIPT_NAME']) ?>" method="post">
        Flavor
        <input type="text" name="flavor" />
        Color
        <input type="text" name="color" />
        <input type="submit" value="Send form" />
    </form>
<?php } else {
    if (! (filter_has_var(INPUT_POST, 'flavor') && (strlen(filter_input(INPUT_POST, 'flavor')) > 0))) {
        print 'You must enter your favorite ice cream flavor.';
    }
    // Значение $_POST['color'] не является обязательным, но если оно
    // задано, то после защитной обработки оно должно содержать
    // более 5 символов
    if (filter_has_var(INPUT_POST, 'color') && (strlen(filter_input(INPUT_POST, 'color', FILTER_SANITIZE_STRING)) <= 5)) {
        print 'Color must be more than 5 characters.';
    }
    // Убедиться в том, что $_POST['choices'] существует
    // и представляет собой массив
//    if (! (filter_has_var(INPUT_POST, 'choices') && filter_input(INPUT_POST, 'choices', FILTER_DEFAULT, FILTER_REQUIRE_ARRAY))) {
//        print 'You must select some choices.';
//    }
}