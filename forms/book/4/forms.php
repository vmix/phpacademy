<?php
/**
 * Created by PhpStorm.
 * User: 0311
 * Date: 05.05.2017
 * Time: 8:25 AM
 */
/**
 * Проверка ввода на форме: числа
 * Задача: Требуется убедиться в том, что в поле на форме было введено число.
 * Например вы хотите проверить что в поле "Возраст пользователя" введено конкретное значение а не текст
 */
$age = filter_input(INPUT_POST, 'age', FILTER_VALIDATE_INT);
if ($age === false){
    print "Submitted age is invalid";
}
/**
 * Задача: Требуется проверить введение числа с плавающей запятой т.е. float
 */
$age = filter_input(INPUT_POST,'age',FILTER_VALIDATE_FLOAT);
if ($age === false){
    print "Submitted price is invalid.";
}

/**
 * Проверка чисел по регулярному выражению
 */
/**
 * Шаблон совпадает с необязательным знаком -,
 * за которым следует минимум одна цифра
 */
if (! preg_match('/^-?\d+$/', $_POST['rating'])){
    print 'You rating must be an integer.';
}
/**
 * Шаблон совпадает с необязательным знаком -, за которым следует
 * необязательная последовательность цифр(целая часть),
 * затем необязательная точка и как минимум одна цифра.
 */
if (! preg_match('/^-?\d*\.?\d+$/',$_POST['temperature'])){
    print 'Your temperature mys be a number';
}
/**
 * Многие фанатичные сторонники оптимизации считают, что регулярных выра-
жений следует избегать, потому что они работают относительно медленно. Од-
нако в данном случае простые регулярные выражения практически не уступают
функциям фильтров по эффективности. Если вы увереннее чувствуете себя
с регулярными выражениями или используете их в других контекстах, этот ва-
риант может быть удобен. Регулярное выражение также позволяет рассматривать
действительные числа (например, 782364.238723123), которые не могут хранить-
ся в формате с плавающей точкой PHP без потери точности. Например, такая
возможность может пригодиться для хранения значений широты и долготы,
которые вы планируете хранить в строковом виде.
 */
