<?php
/**
 * Created by PhpStorm.
 * User: Ivan
 * Date: 5/17/17
 * Time: 11:44 AM
 */
/**
 * Построение строки запроса
 * Требуется сгенерировать строку запроса с заданными парами «имя/значение».
 */
$vars = array('name' => 'Oscar the Grouch',
    'color' => 'green',
    'favorite_punctuation' => '#');
$query_string = http_build_query($vars);
$url = '/muppet/select.php?' . $query_string;
/**
 * URL-адрес, построенный в Решении, выглядит так:
/muppet/select.php?name=Oscar+the+Grouch&color=green&favorite_punctuation=%23
Так как в URL-адресах и строках запросов не все символы считаются действи-
тельными, функция кодирует данные в подходящий формат. Например, в стро-
ке запроса пробелы представлены знаками +. Специальные символы обознача-
ются шестнадцатеричными кодами, например символ # имеет обозначение %23,
потому что ASCII-код # равен 35, что соответствует 23 в шестнадцатеричной
записи.
Хотя кодирование, выполняемое http_build_query(), предотвращает искажение
генерируемого URL-адреса специальными символами в именах и значениях
переменных, у вас могут возникнуть проблемы с именами переменных, начина-
ющимися с имен сущностей HTML. Рассмотрим следующий частичный URL-
адрес для получения информации о стереосистеме:
/stereo.php?speakers=12&cdplayer=52&amp=10
Символу & соответствует сущность HTML &amp; следовательно, браузер может
интерпретировать этот URL-адрес как:
/stereo.php?speakers=12&cdplayer=52&=10
Есть три способа предотвращения искажения URL-адресов встроенными сущ-
ностями. Во-первых, можно выбирать имена переменных, которые невозможно
спутать с сущностями, например _amp вместо amp. Во-вторых, можно преобразо-
вать символы с эквивалентными сущностями HTML перед выводом URL-адреса.
Для этого используется функция htmlentities():
$url = '/muppet/select.php?' . htmlentities($query_string);
Полученный URL-адрес выглядит так:
/muppet/select.php?name=Oscar+the+Grouch&color=green&favorite_punctuation=%23
В-третьих, можно сменить разделитель аргументов & на &amp;, задав конфигура-
ционной директиве arg_separator.input значение &amp;. Далее функция http_
build_query() будет объединять пары «имя/значение» с разделителем &amp;:
ini_set('arg_separator.input', '&amp;');
 */